using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
#if !ONLINE_JUDGE
            StreamReader sr = new StreamReader("Input.txt");
            StreamWriter sw = new StreamWriter("Output.txt");
            Console.SetIn(sr);
            Console.SetOut(sw);
#endif
            int[] tokens = Console.ReadLine().Split(' ', '\t').Select(e => int.Parse(e)).ToArray();
            int n = tokens[0];
            int m = tokens[1];

            int[,] a = new int[3, m];

            for (int i = 0; i < m; i++)
            {
                tokens = Console.ReadLine().Split(' ', '\t').Select(e => int.Parse(e)).ToArray();
                a[0, i] = tokens[0] - 1;
                a[1, i] = tokens[1] - 1;
                a[2, i] = 0;
            }

            int q = Convert.ToInt32(Console.ReadLine());
            int[] qq = Console.ReadLine().Split(' ', '\t').Select(e => int.Parse(e)).ToArray();
            int[] answers = new int[q];

            foreach (int q1 in qq)
                a[2, q1 - 1] = 1;

            DSU dsu = new ConsoleApplication1.DSU(n);

            for (int i = 0; i < m; i++)
                if (a[2, i] == 0)
                    dsu.Union(a[0, i], a[1, i]);

            answers[q - 1] = dsu.N;

            for (int q1 = qq.Length - 1; q1 > 0; q1--)
            {
                dsu.Union(a[0, qq[q1] - 1], a[1, qq[q1] - 1]);
                answers[q1 - 1] = dsu.N;
            }

            for (int i = 0; i < q; i++)
                Console.Write("{0} ", answers[i]);

#if !ONLINE_JUDGE
            ;
            sr.Close();
            sw.Flush();
            sw.Close();
#endif
        }
    }

    class DSU
    {
        public int N { get; set; }
        private int[] _P, _R;

        public DSU(int n)
        {
            this.N = n;
            this._P = new int[n];
            this._R = new int[n];

            for (int i = 0; i < n; i++)
            {
                _R[i] = 0;
                _P[i] = i;
            }
        }

        public int Find(int i)
        {
            if (_P[i] == i)
                return i;
            return _P[i] = Find(_P[i]);
        }

        public void Union(int a, int b)
        {
            a = Find(a);
            b = Find(b);
            if (a != b)
            {
                N--;
                if (_R[a] < _R[b])
                    _P[a] = _P[b];
                else if (_R[a] > _R[b])
                    _P[b] = _P[a];
                else
                {
                    _P[b] = _P[a];
                    _R[a]++;
                }
            }
        }
    }
}
